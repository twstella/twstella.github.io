---
layout: post
title: "빅데이터 혁신 융합대학 인턴 ELP 개발 - asyncio"
date: 2023-12-04 15:04:23 +0900
categories:  ["Python","Intern"]

---
# Python asyncio
<h3>동기와 비동기</h3>
<img class="picture"  src='{{ "public/img/async.jpg" | relative_url }}' alt='relative'/><br>
<div class="explain">
동기(synchronous)는 특정 작업이 끝나면 다음 작업을 처리하고 비동기(asynchronous)는 여러 작업을 처리하도록 예약항 뒤 작업이 끝나면 결과를 받는 방식
</div>
<h3>asyncio 사용하기</h3>
<ul>
<li>네이티브 코루틴 정의(async def)</li>
<div class = "explain">
asyncio.get_event_loop로 이벤트 루프를 얻을 수 있고 asyncio.run_until_complete()로 코루틴 객체를 넣어 네이티브 코루틴이 이벤트 루프에서 실행될 수 있도록 예약할 수 있음
</div>
</ul>
```python
import asyncio

async def func_name():
    code


loop = asyncio.get_event_loop()
loop.run_until_complete(func_name())
```
<ul>
<li>네이티브 코루틴 실행(await)</li>
<div class = "explain">
await 뒤에 코루틴 객체나 Future 객체, Task 객체 등이 오면 해당 객체가 끝날까지 기다린 후 결과를 반환받을 수 있음. 단, await는 코루틴 안에서만 사용할 수 있음.<br>
Future 객체 - 미래에 할 일을 표현하는 클래스로 할 일을 취소하거나 상태 확인, 완료와 결과 설정에 사용<br>
Task 객체 - Future의 파생 클래스이며 Future의 기능들과 코루틴 객체를 포함하고 있음. 코루틴의 실행 취소, 상태 확인, 완료 및 결과 설정에 사용.
</div>
<li>yield</li>
<div class="explain">
return은 결과 값을 한 번만 반환하지만 yield는 결과 값을 여러번에 거쳐서 반환한다.
</div>
<li>제너레이터</li>
<div class="explain">
데이터를 미리 만들어 놓지 않고 필요할 때마나 하나씩 만들어서 사용하는 객체. 
</div>
<li>async with</li>
<div class = "explain">
async with는 클래스나 함수를 비동기로 처리하고 결과를 반환하는 문법으로 async with로 실행 할 수 있는 클래스를 만드려면 <b style="color:red">__aenter__</b>와 <b style="color:red">__aexit__</b> 메소드를 구현해야 함. 그리고 메소드를 만들 때 반드시 async def 사용해야함.
</div>
</ul>
```python
class ClassName:
    async def __aenter__(self):
        code
    async def __aexit__(self):
        code

async with ClassName() as var_name:
    code
```
<ul>
<li>async for</li>
<div class = "explain">
async with는 비동기를 반복하는 문법으로 async for로 실행 할 수 있는 클래스를 만드려면 <b style="color:red">__aiter__</b>와 <b style="color:red">__anext__</b> 메소드를 구현해야 함. 그리고 메소드를 만들 때 반드시 async def 사용해야함. 반복을 끝낼 때는 <b style="color:orange">StopAsyncIteration</b> 예외를 발생시킴.
</div>
</ul>
<h4>출처</h4>
<a href="https://dojang.io/mod/page/view.php?id=2469"> asyncio 사용하기</a>